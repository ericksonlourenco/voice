<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Darkline Voice Studio</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.10.1/jszip.min.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #0f2027 0%, #203a43 50%, #2c5364 100%);
            color: #e0e0e0;
            min-height: 100vh;
            padding: 20px;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
        }

        header {
            text-align: center;
            margin-bottom: 30px;
            padding: 30px;
            background: rgba(255, 255, 255, 0.05);
            border-radius: 15px;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.1);
        }

        h1 {
            font-size: 2.5em;
            margin-bottom: 10px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .subtitle {
            color: #a0a0a0;
            font-size: 1em;
        }

        .api-section {
            background: rgba(255, 255, 255, 0.05);
            padding: 25px;
            border-radius: 12px;
            margin-bottom: 30px;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }

        .api-section h3 {
            margin-bottom: 15px;
            color: #667eea;
        }

        .input-group {
            margin-bottom: 15px;
        }

        .input-group label {
            display: block;
            margin-bottom: 8px;
            color: #b0b0b0;
            font-size: 0.9em;
        }

        .input-group input {
            width: 100%;
            padding: 12px;
            background: rgba(255, 255, 255, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 8px;
            color: #fff;
            font-size: 1em;
            transition: border 0.3s;
        }

        .input-group input:focus {
            outline: none;
            border-color: #667eea;
        }

        .upload-section {
            background: rgba(255, 255, 255, 0.05);
            padding: 40px;
            border-radius: 15px;
            text-align: center;
            margin-bottom: 30px;
            border: 2px dashed rgba(255, 255, 255, 0.3);
            transition: all 0.3s;
            cursor: pointer;
        }

        .upload-section:hover {
            border-color: #667eea;
            background: rgba(102, 126, 234, 0.1);
        }

        .upload-section.dragover {
            border-color: #764ba2;
            background: rgba(118, 75, 162, 0.2);
        }

        .upload-icon {
            font-size: 3em;
            margin-bottom: 15px;
        }

        .btn {
            padding: 12px 30px;
            border: none;
            border-radius: 8px;
            font-size: 1em;
            cursor: pointer;
            transition: all 0.3s;
            font-weight: 600;
        }

        .btn-primary {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 20px rgba(102, 126, 234, 0.4);
        }

        .btn-secondary {
            background: rgba(255, 255, 255, 0.1);
            color: white;
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .btn-secondary:hover {
            background: rgba(255, 255, 255, 0.2);
        }

        .btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        .files-list {
            background: rgba(255, 255, 255, 0.05);
            padding: 20px;
            border-radius: 12px;
            margin-bottom: 30px;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }

        .file-item {
            background: rgba(255, 255, 255, 0.08);
            padding: 20px;
            border-radius: 10px;
            margin-bottom: 15px;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }

        .file-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }

        .file-name {
            font-weight: 600;
            color: #667eea;
            font-size: 1.1em;
        }

        .file-status {
            padding: 5px 15px;
            border-radius: 20px;
            font-size: 0.85em;
            font-weight: 600;
        }

        .status-pending {
            background: rgba(255, 193, 7, 0.2);
            color: #ffc107;
        }

        .status-processing {
            background: rgba(33, 150, 243, 0.2);
            color: #2196f3;
        }

        .status-completed {
            background: rgba(76, 175, 80, 0.2);
            color: #4caf50;
        }

        .status-error {
            background: rgba(244, 67, 54, 0.2);
            color: #f44336;
        }

        .voice-selector {
            margin-top: 15px;
        }

        .voice-selector select {
            width: 100%;
            padding: 10px;
            background: rgba(255, 255, 255, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 8px;
            color: #fff;
            font-size: 0.95em;
        }

        .voice-selector select option {
            background: #1a1a2e;
            color: #fff;
        }

        .global-controls {
            background: rgba(255, 255, 255, 0.05);
            padding: 25px;
            border-radius: 12px;
            margin-bottom: 30px;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }

        .controls-row {
            display: flex;
            gap: 15px;
            flex-wrap: wrap;
            align-items: center;
        }

        .control-item {
            flex: 1;
            min-width: 200px;
        }

        .action-buttons {
            display: flex;
            gap: 15px;
            justify-content: center;
            margin-top: 20px;
        }

        .progress-bar {
            width: 100%;
            height: 8px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 10px;
            overflow: hidden;
            margin-top: 10px;
        }

        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
            width: 0%;
            transition: width 0.3s;
        }

        .audio-player {
            margin-top: 15px;
            width: 100%;
        }

        audio {
            width: 100%;
            height: 40px;
        }

        .footer {
            text-align: center;
            padding: 20px;
            color: #666;
            font-size: 0.9em;
        }

        input[type="file"] {
            display: none;
        }

        .checkbox-group {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-top: 15px;
        }

        .checkbox-group input[type="checkbox"] {
            width: 20px;
            height: 20px;
            cursor: pointer;
        }

        .checkbox-group label {
            cursor: pointer;
            color: #b0b0b0;
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }

        .spinner {
            display: inline-block;
            width: 16px;
            height: 16px;
            border: 2px solid rgba(255, 255, 255, 0.3);
            border-top-color: #667eea;
            border-radius: 50%;
            animation: spin 0.8s linear infinite;
            margin-left: 10px;
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1>üéôÔ∏è Darkline Voice Studio</h1>
            <p class="subtitle">Transforme seus textos em √°udio profissional - Processamento em lote</p>
        </header>

        <div class="api-section">
            <h3>‚öôÔ∏è Configura√ß√£o da API</h3>
            <div class="input-group">
                <label>Google Cloud Text-to-Speech API Key:</label>
                <input type="password" id="apiKey" placeholder="Cole sua API Key aqui (ex: AIzaSyC...)">
            </div>
            <p style="color: #888; font-size: 0.85em; margin-top: 10px;">
                ‚ÑπÔ∏è Sua API Key fica salva apenas no navegador e n√£o √© enviada para nenhum servidor externo.
            </p>
        </div>

        <div class="upload-section" id="uploadSection">
            <div class="upload-icon">üìÅ</div>
            <h3>Arraste seus arquivos .txt aqui</h3>
            <p style="color: #888; margin: 15px 0;">ou</p>
            <button class="btn btn-primary" onclick="document.getElementById('fileInput').click()">
                Selecionar Arquivos
            </button>
            <input type="file" id="fileInput" multiple accept=".txt">
        </div>

        <div class="global-controls" id="globalControls" style="display: none;">
            <h3>üéõÔ∏è Controles Globais</h3>
            <div class="controls-row">
                <div class="control-item">
                    <label>Voz Global (aplicar a todos):</label>
                    <select id="globalVoice">
                        <option value="">Selecione uma voz...</option>
                        <optgroup label="Portugu√™s Brasileiro - Feminino">
                            <option value="pt-BR-Standard-A">Portugu√™s BR - Feminina A (Standard)</option>
                            <option value="pt-BR-Wavenet-A">Portugu√™s BR - Feminina A (WaveNet - Premium)</option>
                            <option value="pt-BR-Wavenet-C">Portugu√™s BR - Feminina C (WaveNet - Premium)</option>
                        </optgroup>
                        <optgroup label="Portugu√™s Brasileiro - Masculino">
                            <option value="pt-BR-Standard-B">Portugu√™s BR - Masculino B (Standard)</option>
                            <option value="pt-BR-Wavenet-B">Portugu√™s BR - Masculino B (WaveNet - Premium)</option>
                        </optgroup>
                        <optgroup label="Portugu√™s Portugal - Feminino">
                            <option value="pt-PT-Standard-A">Portugu√™s PT - Feminina A (Standard)</option>
                            <option value="pt-PT-Wavenet-A">Portugu√™s PT - Feminina A (WaveNet - Premium)</option>
                            <option value="pt-PT-Wavenet-C">Portugu√™s PT - Feminina C (WaveNet - Premium)</option>
                        </optgroup>
                        <optgroup label="Portugu√™s Portugal - Masculino">
                            <option value="pt-PT-Standard-B">Portugu√™s PT - Masculino B (Standard)</option>
                            <option value="pt-PT-Wavenet-B">Portugu√™s PT - Masculino B (WaveNet - Premium)</option>
                            <option value="pt-PT-Standard-C">Portugu√™s PT - Masculino C (Standard)</option>
                            <option value="pt-PT-Wavenet-D">Portugu√™s PT - Masculino D (WaveNet - Premium)</option>
                        </optgroup>
                    </select>
                </div>
                <div class="control-item">
                    <button class="btn btn-secondary" onclick="applyGlobalVoice()">
                        Aplicar Voz a Todos
                    </button>
                </div>
            </div>
            <div class="checkbox-group">
                <input type="checkbox" id="autoDownload">
                <label for="autoDownload">Download autom√°tico ap√≥s gera√ß√£o</label>
            </div>
        </div>

        <div class="files-list" id="filesList" style="display: none;">
            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
                <h3>üìã Arquivos Carregados (<span id="fileCount">0</span>)</h3>
                <button class="btn btn-secondary" onclick="clearAll()">Limpar Todos</button>
            </div>
            <div id="filesContainer"></div>
            
            <div class="action-buttons">
                <button class="btn btn-primary" onclick="generateAll()" id="generateBtn">
                    üéµ Gerar Todos os √Åudios
                </button>
                <button class="btn btn-secondary" onclick="downloadAll()" id="downloadAllBtn" disabled>
                    üì¶ Baixar Todos (ZIP)
                </button>
            </div>
        </div>

        <div class="footer">
            ¬© 2025 Darkline Voice Studio. Todos os direitos reservados.
        </div>
    </div>

    <script>
        let files = [];
        let audioBlobs = {};

        // Vozes dispon√≠veis
        const voices = {
            'pt-BR-Standard-A': { lang: 'pt-BR', name: 'pt-BR-Standard-A', gender: 'FEMALE' },
            'pt-BR-Standard-B': { lang: 'pt-BR', name: 'pt-BR-Standard-B', gender: 'MALE' },
            'pt-BR-Wavenet-A': { lang: 'pt-BR', name: 'pt-BR-Wavenet-A', gender: 'FEMALE' },
            'pt-BR-Wavenet-B': { lang: 'pt-BR', name: 'pt-BR-Wavenet-B', gender: 'MALE' },
            'pt-BR-Wavenet-C': { lang: 'pt-BR', name: 'pt-BR-Wavenet-C', gender: 'FEMALE' },
            'pt-PT-Standard-A': { lang: 'pt-PT', name: 'pt-PT-Standard-A', gender: 'FEMALE' },
            'pt-PT-Standard-B': { lang: 'pt-PT', name: 'pt-PT-Standard-B', gender: 'MALE' },
            'pt-PT-Standard-C': { lang: 'pt-PT', name: 'pt-PT-Standard-C', gender: 'MALE' },
            'pt-PT-Wavenet-A': { lang: 'pt-PT', name: 'pt-PT-Wavenet-A', gender: 'FEMALE' },
            'pt-PT-Wavenet-B': { lang: 'pt-PT', name: 'pt-PT-Wavenet-B', gender: 'MALE' },
            'pt-PT-Wavenet-C': { lang: 'pt-PT', name: 'pt-PT-Wavenet-C', gender: 'FEMALE' },
            'pt-PT-Wavenet-D': { lang: 'pt-PT', name: 'pt-PT-Wavenet-D', gender: 'MALE' }
        };

        // Drag & Drop
        const uploadSection = document.getElementById('uploadSection');
        
        uploadSection.addEventListener('dragover', (e) => {
            e.preventDefault();
            uploadSection.classList.add('dragover');
        });

        uploadSection.addEventListener('dragleave', () => {
            uploadSection.classList.remove('dragover');
        });

        uploadSection.addEventListener('drop', (e) => {
            e.preventDefault();
            uploadSection.classList.remove('dragover');
            handleFiles(e.dataTransfer.files);
        });

        // File Input
        document.getElementById('fileInput').addEventListener('change', (e) => {
            handleFiles(e.target.files);
        });

        function handleFiles(fileList) {
            const txtFiles = Array.from(fileList).filter(f => f.name.endsWith('.txt'));
            
            if (txtFiles.length === 0) {
                alert('Por favor, selecione apenas arquivos .txt');
                return;
            }

            txtFiles.forEach(file => {
                const reader = new FileReader();
                reader.onload = (e) => {
                    const fileData = {
                        id: Date.now() + Math.random(),
                        name: file.name,
                        content: e.target.result,
                        voice: 'pt-BR-Wavenet-A',
                        status: 'pending',
                        audio: null
                    };
                    files.push(fileData);
                    renderFiles();
                };
                reader.readAsText(file);
            });
        }

        function renderFiles() {
            const container = document.getElementById('filesContainer');
            const filesList = document.getElementById('filesList');
            const globalControls = document.getElementById('globalControls');
            
            if (files.length === 0) {
                filesList.style.display = 'none';
                globalControls.style.display = 'none';
                return;
            }

            filesList.style.display = 'block';
            globalControls.style.display = 'block';
            document.getElementById('fileCount').textContent = files.length;

            container.innerHTML = files.map(file => `
                <div class="file-item" id="file-${file.id}">
                    <div class="file-header">
                        <span class="file-name">üìÑ ${file.name}</span>
                        <span class="file-status status-${file.status}">
                            ${getStatusText(file.status)}
                        </span>
                    </div>
                    <div class="voice-selector">
                        <label>Voz para este arquivo:</label>
                        <select onchange="updateVoice(${file.id}, this.value)" ${file.status !== 'pending' ? 'disabled' : ''}>
                            ${Object.keys(voices).map(v => `
                                <option value="${v}" ${file.voice === v ? 'selected' : ''}>
                                    ${document.querySelector(`#globalVoice option[value="${v}"]`).textContent}
                                </option>
                            `).join('')}
                        </select>
                    </div>
                    ${file.status === 'processing' ? `
                        <div class="progress-bar">
                            <div class="progress-fill" style="width: 50%"></div>
                        </div>
                    ` : ''}
                    ${file.audio ? `
                        <div class="audio-player">
                            <audio controls src="${file.audio}"></audio>
                        </div>
                        <div style="margin-top: 10px;">
                            <button class="btn btn-secondary" onclick="downloadSingle(${file.id})">
                                üíæ Baixar √Åudio
                            </button>
                        </div>
                    ` : ''}
                    ${file.status === 'error' ? `
                        <p style="color: #f44336; margin-top: 10px; font-size: 0.9em;">
                            ‚ùå Erro ao gerar √°udio. Verifique sua API Key e tente novamente.
                        </p>
                    ` : ''}
                </div>
            `).join('');

            updateDownloadAllButton();
        }

        function getStatusText(status) {
            const texts = {
                'pending': '‚è≥ Aguardando',
                'processing': 'üîÑ Processando',
                'completed': '‚úÖ Conclu√≠do',
                'error': '‚ùå Erro'
            };
            return texts[status] || status;
        }

        function updateVoice(fileId, voice) {
            const file = files.find(f => f.id === fileId);
            if (file) {
                file.voice = voice;
            }
        }

        function applyGlobalVoice() {
            const globalVoice = document.getElementById('globalVoice').value;
            if (!globalVoice) {
                alert('Selecione uma voz primeiro!');
                return;
            }

            files.forEach(file => {
                if (file.status === 'pending') {
                    file.voice = globalVoice;
                }
            });
            renderFiles();
            alert('Voz aplicada a todos os arquivos pendentes!');
        }

        async function generateAll() {
            const apiKey = document.getElementById('apiKey').value.trim();
            
            if (!apiKey) {
                alert('Por favor, insira sua API Key do Google Cloud!');
                return;
            }

            const pendingFiles = files.filter(f => f.status === 'pending');
            if (pendingFiles.length === 0) {
                alert('Todos os arquivos j√° foram processados!');
                return;
            }

            document.getElementById('generateBtn').disabled = true;
            document.getElementById('generateBtn').innerHTML = 'üîÑ Gerando... <span class="spinner"></span>';

            for (const file of pendingFiles) {
                await generateAudio(file, apiKey);
            }

            document.getElementById('generateBtn').disabled = false;
            document.getElementById('generateBtn').innerHTML = 'üéµ Gerar Todos os √Åudios';
            
            alert('Gera√ß√£o conclu√≠da!');
            
            if (document.getElementById('autoDownload').checked) {
                downloadAll();
            }
        }

        async function generateAudio(file, apiKey) {
            file.status = 'processing';
            renderFiles();

            try {
                const voice = voices[file.voice];
                const response = await fetch(`https://texttospeech.googleapis.com/v1/text:synthesize?key=${apiKey}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        input: { text: file.content },
                        voice: {
                            languageCode: voice.lang,
                            name: voice.name,
                            ssmlGender: voice.gender
                        },
                        audioConfig: {
                            audioEncoding: 'MP3',
                            pitch: 0,
                            speakingRate: 1.0
                        }
                    })
                });

                if (!response.ok) {
                    throw new Error('Erro na API');
                }

                const data = await response.json();
                const audioContent = data.audioContent;
                
                // Converter base64 para blob
                const byteCharacters = atob(audioContent);
                const byteNumbers = new Array(byteCharacters.length);
                for (let i = 0; i < byteCharacters.length; i++) {
                    byteNumbers[i] = byteCharacters.charCodeAt(i);
                }
                const byteArray = new Uint8Array(byteNumbers);
                const blob = new Blob([byteArray], { type: 'audio/mp3' });
                
                file.audio = URL.createObjectURL(blob);
                audioBlobs[file.id] = blob;
                file.status = 'completed';
            } catch (error) {
                console.error('Erro:', error);
                file.status = 'error';
            }

            renderFiles();
        }

        function downloadSingle(fileId) {
            const file = files.find(f => f.id === fileId);
            if (!file || !audioBlobs[file.id]) return;

            const link = document.createElement('a');
            link.href = file.audio;
            link.download = file.name.replace('.txt', '.mp3');
            link.click();
        }

        async function downloadAll() {
            const completedFiles = files.filter(f => f.status === 'completed');
            if (completedFiles.length === 0) {
                alert('Nenhum √°udio dispon√≠vel para download!');
                return;
            }

            const zip = new JSZip();
            
            completedFiles.forEach(file => {
                const blob = audioBlobs[file.id];
                if (blob) {
                    zip.file(file.name.replace('.txt', '.mp3'), blob);
                }
            });

            const content = await zip.generateAsync({ type: 'blob' });
            const link = document.createElement('a');
            link.href = URL.createObjectURL(content);
            link.download = 'darkline-audios.zip';
            link.click();
        }

        function updateDownloadAllButton() {
            const completedCount = files.filter(f => f.status === 'completed').length;
            const btn = document.getElementById('downloadAllBtn');
            btn.disabled = completedCount === 0;
            btn.textContent = `üì¶ Baixar Todos (${completedCount} √°udios)`;
        }

        function clearAll() {
            if (confirm('Tem certeza que deseja limpar todos os arquivos?')) {
                files = [];
                audioBlobs = {};
                renderFiles();
            }
        }
    </script>
</body>
</html>
